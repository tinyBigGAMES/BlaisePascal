{==============================================================================
  NitroPascal - Modern Pascal • C Performance

  Copyright © 2025-present tinyBigGAMES™ LLC
  All Rights Reserved.

  https://nitropascal.org

  See LICENSE for license information
-------------------------------------------------------------------------------
  raylib Binding
  
  This unit provides NitroPascal bindings for raylib - a simple and easy-to-use
  library to enjoy videogames programming.
  
  raylib Copyright © 2013-2024 Ramon Santamaria (@raysan5)
  
  raylib is licensed under an unmodified zlib/libpng license
  https://github.com/raysan5/raylib
  https://www.raylib.com

==============================================================================}

// Include path for raylib headers
{$INCLUDE_PATH   ".\res\libs\raylib\inc"}

// Library path for raylib static libraries
{$LIBRARY_PATH   ".\res\libs\raylib\lib"}

// Static libraries to link (raylib + Windows dependencies)
{$LINK           "libraylib.a"}   // Main raylib library
{$LINK           "gdi32"}         // Windows GDI (graphics)
{$LINK           "opengl32"}      // OpenGL graphics
{$LINK           "winmm"}         // Windows multimedia

// C header inclusion - provides all raylib declarations
{$INCLUDE_HEADER '<raylib.h>'}

unit raylib;

interface

type
  //===========================================================================
  // Callback Function Types
  //===========================================================================
  TraceLogCallback     = procedure(logLevel: Integer; const text: PAnsiChar; args: Pointer); cdecl;
  LoadFileDataCallback = function(const fileName: PAnsiChar; dataSize: PInteger): PByte; cdecl;
  SaveFileDataCallback = function(const fileName: PAnsiChar; data: Pointer; dataSize: Integer): Boolean; cdecl;
  LoadFileTextCallback = function(const fileName: PAnsiChar): PAnsiChar; cdecl;
  SaveFileTextCallback = function(const fileName: PAnsiChar; text: PAnsiChar): Boolean; cdecl;
  AudioCallback        = procedure(bufferData: Pointer; frames: Cardinal); cdecl;

//=============================================================================
// Functions
//=============================================================================
procedure InitWindow(width: Integer; height: Integer; const title: PAnsiChar); cdecl; external;
procedure CloseWindow(); cdecl; external;
function  WindowShouldClose(): Boolean; cdecl; external;
function  IsWindowReady(): Boolean; cdecl; external;
function  IsWindowFullscreen(): Boolean; cdecl; external;
function  IsWindowHidden(): Boolean; cdecl; external;
function  IsWindowMinimized(): Boolean; cdecl; external;
function  IsWindowMaximized(): Boolean; cdecl; external;
function  IsWindowFocused(): Boolean; cdecl; external;
function  IsWindowResized(): Boolean; cdecl; external;
function  IsWindowState(flag: Cardinal): Boolean; cdecl; external;
procedure SetWindowState(flags: Cardinal); cdecl; external;
procedure ClearWindowState(flags: Cardinal); cdecl; external;
procedure ToggleFullscreen(); cdecl; external;
procedure ToggleBorderlessWindowed(); cdecl; external;
procedure MaximizeWindow(); cdecl; external;
procedure MinimizeWindow(); cdecl; external;
procedure RestoreWindow(); cdecl; external;
procedure SetWindowIcon(image: Image); cdecl; external;
procedure SetWindowIcons(images: PImage; count: Integer); cdecl; external;
procedure SetWindowTitle(const title: PAnsiChar); cdecl; external;
procedure SetWindowPosition(x: Integer; y: Integer); cdecl; external;
procedure SetWindowMonitor(monitor: Integer); cdecl; external;
procedure SetWindowMinSize(width: Integer; height: Integer); cdecl; external;
procedure SetWindowMaxSize(width: Integer; height: Integer); cdecl; external;
procedure SetWindowSize(width: Integer; height: Integer); cdecl; external;
procedure SetWindowOpacity(opacity: Single); cdecl; external;
procedure SetWindowFocused(); cdecl; external;
function  GetWindowHandle(): Pointer; cdecl; external;
function  GetScreenWidth(): Integer; cdecl; external;
function  GetScreenHeight(): Integer; cdecl; external;
function  GetRenderWidth(): Integer; cdecl; external;
function  GetRenderHeight(): Integer; cdecl; external;
function  GetMonitorCount(): Integer; cdecl; external;
function  GetCurrentMonitor(): Integer; cdecl; external;
function  GetMonitorPosition(monitor: Integer): Vector2; cdecl; external;
function  GetMonitorWidth(monitor: Integer): Integer; cdecl; external;
function  GetMonitorHeight(monitor: Integer): Integer; cdecl; external;
function  GetMonitorPhysicalWidth(monitor: Integer): Integer; cdecl; external;
function  GetMonitorPhysicalHeight(monitor: Integer): Integer; cdecl; external;
function  GetMonitorRefreshRate(monitor: Integer): Integer; cdecl; external;
function  GetWindowPosition(): Vector2; cdecl; external;
function  GetWindowScaleDPI(): Vector2; cdecl; external;
function  GetMonitorName(monitor: Integer): PAnsiChar; cdecl; external;
procedure SetClipboardText(const text: PAnsiChar); cdecl; external;
function  GetClipboardText(): PAnsiChar; cdecl; external;
function  GetClipboardImage(): Image; cdecl; external;
procedure EnableEventWaiting(); cdecl; external;
procedure DisableEventWaiting(); cdecl; external;
procedure ShowCursor(); cdecl; external;
procedure HideCursor(); cdecl; external;
function  IsCursorHidden(): Boolean; cdecl; external;
procedure EnableCursor(); cdecl; external;
procedure DisableCursor(); cdecl; external;
function  IsCursorOnScreen(): Boolean; cdecl; external;
procedure ClearBackground(color: Color); cdecl; external;
procedure BeginDrawing(); cdecl; external;
procedure EndDrawing(); cdecl; external;
procedure BeginMode2D(camera: Camera2D); cdecl; external;
procedure EndMode2D(); cdecl; external;
procedure BeginMode3D(camera: Camera3D); cdecl; external;
procedure EndMode3D(); cdecl; external;
procedure BeginTextureMode(target: RenderTexture2D); cdecl; external;
procedure EndTextureMode(); cdecl; external;
procedure BeginShaderMode(shader: Shader); cdecl; external;
procedure EndShaderMode(); cdecl; external;
procedure BeginBlendMode(mode: Integer); cdecl; external;
procedure EndBlendMode(); cdecl; external;
procedure BeginScissorMode(x: Integer; y: Integer; width: Integer; height: Integer); cdecl; external;
procedure EndScissorMode(); cdecl; external;
procedure BeginVrStereoMode(config: VrStereoConfig); cdecl; external;
procedure EndVrStereoMode(); cdecl; external;
function  LoadVrStereoConfig(device: VrDeviceInfo): VrStereoConfig; cdecl; external;
procedure UnloadVrStereoConfig(config: VrStereoConfig); cdecl; external;
function  LoadShader(const vsFileName: PAnsiChar; const fsFileName: PAnsiChar): Shader; cdecl; external;
function  LoadShaderFromMemory(const vsCode: PAnsiChar; const fsCode: PAnsiChar): Shader; cdecl; external;
function  IsShaderValid(shader: Shader): Boolean; cdecl; external;
function  GetShaderLocation(shader: Shader; const uniformName: PAnsiChar): Integer; cdecl; external;
function  GetShaderLocationAttrib(shader: Shader; const attribName: PAnsiChar): Integer; cdecl; external;
procedure SetShaderValue(shader: Shader; locIndex: Integer; const value: Pointer; uniformType: Integer); cdecl; external;
procedure SetShaderValueV(shader: Shader; locIndex: Integer; const value: Pointer; uniformType: Integer; count: Integer); cdecl; external;
procedure SetShaderValueMatrix(shader: Shader; locIndex: Integer; mat: Matrix); cdecl; external;
procedure SetShaderValueTexture(shader: Shader; locIndex: Integer; texture: Texture2D); cdecl; external;
procedure UnloadShader(shader: Shader); cdecl; external;
function  GetScreenToWorldRay(position: Vector2; camera: Camera): Ray; cdecl; external;
function  GetScreenToWorldRayEx(position: Vector2; camera: Camera; width: Integer; height: Integer): Ray; cdecl; external;
function  GetWorldToScreen(position: Vector3; camera: Camera): Vector2; cdecl; external;
function  GetWorldToScreenEx(position: Vector3; camera: Camera; width: Integer; height: Integer): Vector2; cdecl; external;
function  GetWorldToScreen2D(position: Vector2; camera: Camera2D): Vector2; cdecl; external;
function  GetScreenToWorld2D(position: Vector2; camera: Camera2D): Vector2; cdecl; external;
function  GetCameraMatrix(camera: Camera): Matrix; cdecl; external;
function  GetCameraMatrix2D(camera: Camera2D): Matrix; cdecl; external;
procedure SetTargetFPS(fps: Integer); cdecl; external;
function  GetFrameTime(): Single; cdecl; external;
function  GetTime(): Double; cdecl; external;
function  GetFPS(): Integer; cdecl; external;
procedure SwapScreenBuffer(); cdecl; external;
procedure PollInputEvents(); cdecl; external;
procedure WaitTime(seconds: Double); cdecl; external;
procedure SetRandomSeed(seed: Cardinal); cdecl; external;
function  GetRandomValue(min: Integer; max: Integer): Integer; cdecl; external;
function  LoadRandomSequence(count: Cardinal; min: Integer; max: Integer): PInteger; cdecl; external;
procedure UnloadRandomSequence(sequence: PInteger); cdecl; external;
procedure TakeScreenshot(const fileName: PAnsiChar); cdecl; external;
procedure SetConfigFlags(flags: Cardinal); cdecl; external;
procedure OpenURL(const url: PAnsiChar); cdecl; external;
procedure TraceLog(logLevel: Integer; const text: PAnsiChar) varargs; cdecl; external;
procedure SetTraceLogLevel(logLevel: Integer); cdecl; external;
function  MemAlloc(size: Cardinal): Pointer; cdecl; external;
function  MemRealloc(ptr: Pointer; size: Cardinal): Pointer; cdecl; external;
procedure MemFree(ptr: Pointer); cdecl; external;
procedure SetTraceLogCallback(callback: TraceLogCallback); cdecl; external;
procedure SetLoadFileDataCallback(callback: LoadFileDataCallback); cdecl; external;
procedure SetSaveFileDataCallback(callback: SaveFileDataCallback); cdecl; external;
procedure SetLoadFileTextCallback(callback: LoadFileTextCallback); cdecl; external;
procedure SetSaveFileTextCallback(callback: SaveFileTextCallback); cdecl; external;
function  LoadFileData(const fileName: PAnsiChar; dataSize: PInteger): PByte; cdecl; external;
procedure UnloadFileData(data: PByte); cdecl; external;
function  SaveFileData(const fileName: PAnsiChar; data: Pointer; dataSize: Integer): Boolean; cdecl; external;
function  ExportDataAsCode(const data: PByte; dataSize: Integer; const fileName: PAnsiChar): Boolean; cdecl; external;
function  LoadFileText(const fileName: PAnsiChar): PAnsiChar; cdecl; external;
procedure UnloadFileText(text: PAnsiChar); cdecl; external;
function  SaveFileText(const fileName: PAnsiChar; text: PAnsiChar): Boolean; cdecl; external;
function  FileExists(const fileName: PAnsiChar): Boolean; cdecl; external;
function  DirectoryExists(const dirPath: PAnsiChar): Boolean; cdecl; external;
function  IsFileExtension(const fileName: PAnsiChar; const ext: PAnsiChar): Boolean; cdecl; external;
function  GetFileLength(const fileName: PAnsiChar): Integer; cdecl; external;
function  GetFileExtension(const fileName: PAnsiChar): PAnsiChar; cdecl; external;
function  GetFileName(const filePath: PAnsiChar): PAnsiChar; cdecl; external;
function  GetFileNameWithoutExt(const filePath: PAnsiChar): PAnsiChar; cdecl; external;
function  GetDirectoryPath(const filePath: PAnsiChar): PAnsiChar; cdecl; external;
function  GetPrevDirectoryPath(const dirPath: PAnsiChar): PAnsiChar; cdecl; external;
function  GetWorkingDirectory(): PAnsiChar; cdecl; external;
function  GetApplicationDirectory(): PAnsiChar; cdecl; external;
function  MakeDirectory(const dirPath: PAnsiChar): Integer; cdecl; external;
function  ChangeDirectory(const dir: PAnsiChar): Boolean; cdecl; external;
function  IsPathFile(const path: PAnsiChar): Boolean; cdecl; external;
function  IsFileNameValid(const fileName: PAnsiChar): Boolean; cdecl; external;
function  LoadDirectoryFiles(const dirPath: PAnsiChar): FilePathList; cdecl; external;
function  LoadDirectoryFilesEx(const basePath: PAnsiChar; const filter: PAnsiChar; scanSubdirs: Boolean): FilePathList; cdecl; external;
procedure UnloadDirectoryFiles(files: FilePathList); cdecl; external;
function  IsFileDropped(): Boolean; cdecl; external;
function  LoadDroppedFiles(): FilePathList; cdecl; external;
procedure UnloadDroppedFiles(files: FilePathList); cdecl; external;
function  GetFileModTime(const fileName: PAnsiChar): Longint; cdecl; external;
function  CompressData(const data: PByte; dataSize: Integer; compDataSize: PInteger): PByte; cdecl; external;
function  DecompressData(const compData: PByte; compDataSize: Integer; dataSize: PInteger): PByte; cdecl; external;
function  EncodeDataBase64(const data: PByte; dataSize: Integer; outputSize: PInteger): PAnsiChar; cdecl; external;
function  DecodeDataBase64(const data: PByte; outputSize: PInteger): PByte; cdecl; external;
function  ComputeCRC32(data: PByte; dataSize: Integer): Cardinal; cdecl; external;
function  ComputeMD5(data: PByte; dataSize: Integer): PCardinal; cdecl; external;
function  ComputeSHA1(data: PByte; dataSize: Integer): PCardinal; cdecl; external;
function  LoadAutomationEventList(const fileName: PAnsiChar): AutomationEventList; cdecl; external;
procedure UnloadAutomationEventList(list: AutomationEventList); cdecl; external;
function  ExportAutomationEventList(list: AutomationEventList; const fileName: PAnsiChar): Boolean; cdecl; external;
procedure SetAutomationEventList(list: PAutomationEventList); cdecl; external;
procedure SetAutomationEventBaseFrame(frame: Integer); cdecl; external;
procedure StartAutomationEventRecording(); cdecl; external;
procedure StopAutomationEventRecording(); cdecl; external;
procedure PlayAutomationEvent(event: AutomationEvent); cdecl; external;
function  IsKeyPressed(key: Integer): Boolean; cdecl; external;
function  IsKeyPressedRepeat(key: Integer): Boolean; cdecl; external;
function  IsKeyDown(key: Integer): Boolean; cdecl; external;
function  IsKeyReleased(key: Integer): Boolean; cdecl; external;
function  IsKeyUp(key: Integer): Boolean; cdecl; external;
function  GetKeyPressed(): Integer; cdecl; external;
function  GetCharPressed(): Integer; cdecl; external;
procedure SetExitKey(key: Integer); cdecl; external;
function  IsGamepadAvailable(gamepad: Integer): Boolean; cdecl; external;
function  GetGamepadName(gamepad: Integer): PAnsiChar; cdecl; external;
function  IsGamepadButtonPressed(gamepad: Integer; button: Integer): Boolean; cdecl; external;
function  IsGamepadButtonDown(gamepad: Integer; button: Integer): Boolean; cdecl; external;
function  IsGamepadButtonReleased(gamepad: Integer; button: Integer): Boolean; cdecl; external;
function  IsGamepadButtonUp(gamepad: Integer; button: Integer): Boolean; cdecl; external;
function  GetGamepadButtonPressed(): Integer; cdecl; external;
function  GetGamepadAxisCount(gamepad: Integer): Integer; cdecl; external;
function  GetGamepadAxisMovement(gamepad: Integer; axis: Integer): Single; cdecl; external;
function  SetGamepadMappings(const mappings: PAnsiChar): Integer; cdecl; external;
procedure SetGamepadVibration(gamepad: Integer; leftMotor: Single; rightMotor: Single; duration: Single); cdecl; external;
function  IsMouseButtonPressed(button: Integer): Boolean; cdecl; external;
function  IsMouseButtonDown(button: Integer): Boolean; cdecl; external;
function  IsMouseButtonReleased(button: Integer): Boolean; cdecl; external;
function  IsMouseButtonUp(button: Integer): Boolean; cdecl; external;
function  GetMouseX(): Integer; cdecl; external;
function  GetMouseY(): Integer; cdecl; external;
function  GetMousePosition(): Vector2; cdecl; external;
function  GetMouseDelta(): Vector2; cdecl; external;
procedure SetMousePosition(x: Integer; y: Integer); cdecl; external;
procedure SetMouseOffset(offsetX: Integer; offsetY: Integer); cdecl; external;
procedure SetMouseScale(scaleX: Single; scaleY: Single); cdecl; external;
function  GetMouseWheelMove(): Single; cdecl; external;
function  GetMouseWheelMoveV(): Vector2; cdecl; external;
procedure SetMouseCursor(cursor: Integer); cdecl; external;
function  GetTouchX(): Integer; cdecl; external;
function  GetTouchY(): Integer; cdecl; external;
function  GetTouchPosition(index: Integer): Vector2; cdecl; external;
function  GetTouchPointId(index: Integer): Integer; cdecl; external;
function  GetTouchPointCount(): Integer; cdecl; external;
procedure SetGesturesEnabled(flags: Cardinal); cdecl; external;
function  IsGestureDetected(gesture: Cardinal): Boolean; cdecl; external;
function  GetGestureDetected(): Integer; cdecl; external;
function  GetGestureHoldDuration(): Single; cdecl; external;
function  GetGestureDragVector(): Vector2; cdecl; external;
function  GetGestureDragAngle(): Single; cdecl; external;
function  GetGesturePinchVector(): Vector2; cdecl; external;
function  GetGesturePinchAngle(): Single; cdecl; external;
procedure UpdateCamera(camera: PCamera; mode: Integer); cdecl; external;
procedure UpdateCameraPro(camera: PCamera; movement: Vector3; rotation: Vector3; zoom: Single); cdecl; external;
procedure SetShapesTexture(texture: Texture2D; source: Rectangle); cdecl; external;
function  GetShapesTexture(): Texture2D; cdecl; external;
function  GetShapesTextureRectangle(): Rectangle; cdecl; external;
procedure DrawPixel(posX: Integer; posY: Integer; color: Color); cdecl; external;
procedure DrawPixelV(position: Vector2; color: Color); cdecl; external;
procedure DrawLine(startPosX: Integer; startPosY: Integer; endPosX: Integer; endPosY: Integer; color: Color); cdecl; external;
procedure DrawLineV(startPos: Vector2; endPos: Vector2; color: Color); cdecl; external;
procedure DrawLineEx(startPos: Vector2; endPos: Vector2; thick: Single; color: Color); cdecl; external;
procedure DrawLineStrip(const points: PVector2; pointCount: Integer; color: Color); cdecl; external;
procedure DrawLineBezier(startPos: Vector2; endPos: Vector2; thick: Single; color: Color); cdecl; external;
procedure DrawCircle(centerX: Integer; centerY: Integer; radius: Single; color: Color); cdecl; external;
procedure DrawCircleSector(center: Vector2; radius: Single; startAngle: Single; endAngle: Single; segments: Integer; color: Color); cdecl; external;
procedure DrawCircleSectorLines(center: Vector2; radius: Single; startAngle: Single; endAngle: Single; segments: Integer; color: Color); cdecl; external;
procedure DrawCircleGradient(centerX: Integer; centerY: Integer; radius: Single; inner: Color; outer: Color); cdecl; external;
procedure DrawCircleV(center: Vector2; radius: Single; color: Color); cdecl; external;
procedure DrawCircleLines(centerX: Integer; centerY: Integer; radius: Single; color: Color); cdecl; external;
procedure DrawCircleLinesV(center: Vector2; radius: Single; color: Color); cdecl; external;
procedure DrawEllipse(centerX: Integer; centerY: Integer; radiusH: Single; radiusV: Single; color: Color); cdecl; external;
procedure DrawEllipseLines(centerX: Integer; centerY: Integer; radiusH: Single; radiusV: Single; color: Color); cdecl; external;
procedure DrawRing(center: Vector2; innerRadius: Single; outerRadius: Single; startAngle: Single; endAngle: Single; segments: Integer; color: Color); cdecl; external;
procedure DrawRingLines(center: Vector2; innerRadius: Single; outerRadius: Single; startAngle: Single; endAngle: Single; segments: Integer; color: Color); cdecl; external;
procedure DrawRectangle(posX: Integer; posY: Integer; width: Integer; height: Integer; color: Color); cdecl; external;
procedure DrawRectangleV(position: Vector2; size: Vector2; color: Color); cdecl; external;
procedure DrawRectangleRec(rec: Rectangle; color: Color); cdecl; external;
procedure DrawRectanglePro(rec: Rectangle; origin: Vector2; rotation: Single; color: Color); cdecl; external;
procedure DrawRectangleGradientV(posX: Integer; posY: Integer; width: Integer; height: Integer; top: Color; bottom: Color); cdecl; external;
procedure DrawRectangleGradientH(posX: Integer; posY: Integer; width: Integer; height: Integer; left: Color; right: Color); cdecl; external;
procedure DrawRectangleGradientEx(rec: Rectangle; topLeft: Color; bottomLeft: Color; topRight: Color; bottomRight: Color); cdecl; external;
procedure DrawRectangleLines(posX: Integer; posY: Integer; width: Integer; height: Integer; color: Color); cdecl; external;
procedure DrawRectangleLinesEx(rec: Rectangle; lineThick: Single; color: Color); cdecl; external;
procedure DrawRectangleRounded(rec: Rectangle; roundness: Single; segments: Integer; color: Color); cdecl; external;
procedure DrawRectangleRoundedLines(rec: Rectangle; roundness: Single; segments: Integer; color: Color); cdecl; external;
procedure DrawRectangleRoundedLinesEx(rec: Rectangle; roundness: Single; segments: Integer; lineThick: Single; color: Color); cdecl; external;
procedure DrawTriangle(v1: Vector2; v2: Vector2; v3: Vector2; color: Color); cdecl; external;
procedure DrawTriangleLines(v1: Vector2; v2: Vector2; v3: Vector2; color: Color); cdecl; external;
procedure DrawTriangleFan(const points: PVector2; pointCount: Integer; color: Color); cdecl; external;
procedure DrawTriangleStrip(const points: PVector2; pointCount: Integer; color: Color); cdecl; external;
procedure DrawPoly(center: Vector2; sides: Integer; radius: Single; rotation: Single; color: Color); cdecl; external;
procedure DrawPolyLines(center: Vector2; sides: Integer; radius: Single; rotation: Single; color: Color); cdecl; external;
procedure DrawPolyLinesEx(center: Vector2; sides: Integer; radius: Single; rotation: Single; lineThick: Single; color: Color); cdecl; external;
procedure DrawSplineLinear(const points: PVector2; pointCount: Integer; thick: Single; color: Color); cdecl; external;
procedure DrawSplineBasis(const points: PVector2; pointCount: Integer; thick: Single; color: Color); cdecl; external;
procedure DrawSplineCatmullRom(const points: PVector2; pointCount: Integer; thick: Single; color: Color); cdecl; external;
procedure DrawSplineBezierQuadratic(const points: PVector2; pointCount: Integer; thick: Single; color: Color); cdecl; external;
procedure DrawSplineBezierCubic(const points: PVector2; pointCount: Integer; thick: Single; color: Color); cdecl; external;
procedure DrawSplineSegmentLinear(p1: Vector2; p2: Vector2; thick: Single; color: Color); cdecl; external;
procedure DrawSplineSegmentBasis(p1: Vector2; p2: Vector2; p3: Vector2; p4: Vector2; thick: Single; color: Color); cdecl; external;
procedure DrawSplineSegmentCatmullRom(p1: Vector2; p2: Vector2; p3: Vector2; p4: Vector2; thick: Single; color: Color); cdecl; external;
procedure DrawSplineSegmentBezierQuadratic(p1: Vector2; c2: Vector2; p3: Vector2; thick: Single; color: Color); cdecl; external;
procedure DrawSplineSegmentBezierCubic(p1: Vector2; c2: Vector2; c3: Vector2; p4: Vector2; thick: Single; color: Color); cdecl; external;
function  GetSplinePointLinear(startPos: Vector2; endPos: Vector2; t: Single): Vector2; cdecl; external;
function  GetSplinePointBasis(p1: Vector2; p2: Vector2; p3: Vector2; p4: Vector2; t: Single): Vector2; cdecl; external;
function  GetSplinePointCatmullRom(p1: Vector2; p2: Vector2; p3: Vector2; p4: Vector2; t: Single): Vector2; cdecl; external;
function  GetSplinePointBezierQuad(p1: Vector2; c2: Vector2; p3: Vector2; t: Single): Vector2; cdecl; external;
function  GetSplinePointBezierCubic(p1: Vector2; c2: Vector2; c3: Vector2; p4: Vector2; t: Single): Vector2; cdecl; external;
function  CheckCollisionRecs(rec1: Rectangle; rec2: Rectangle): Boolean; cdecl; external;
function  CheckCollisionCircles(center1: Vector2; radius1: Single; center2: Vector2; radius2: Single): Boolean; cdecl; external;
function  CheckCollisionCircleRec(center: Vector2; radius: Single; rec: Rectangle): Boolean; cdecl; external;
function  CheckCollisionCircleLine(center: Vector2; radius: Single; p1: Vector2; p2: Vector2): Boolean; cdecl; external;
function  CheckCollisionPointRec(point: Vector2; rec: Rectangle): Boolean; cdecl; external;
function  CheckCollisionPointCircle(point: Vector2; center: Vector2; radius: Single): Boolean; cdecl; external;
function  CheckCollisionPointTriangle(point: Vector2; p1: Vector2; p2: Vector2; p3: Vector2): Boolean; cdecl; external;
function  CheckCollisionPointLine(point: Vector2; p1: Vector2; p2: Vector2; threshold: Integer): Boolean; cdecl; external;
function  CheckCollisionPointPoly(point: Vector2; const points: PVector2; pointCount: Integer): Boolean; cdecl; external;
function  CheckCollisionLines(startPos1: Vector2; endPos1: Vector2; startPos2: Vector2; endPos2: Vector2; collisionPoint: PVector2): Boolean; cdecl; external;
function  GetCollisionRec(rec1: Rectangle; rec2: Rectangle): Rectangle; cdecl; external;
function  LoadImage(const fileName: PAnsiChar): Image; cdecl; external;
function  LoadImageRaw(const fileName: PAnsiChar; width: Integer; height: Integer; format: Integer; headerSize: Integer): Image; cdecl; external;
function  LoadImageAnim(const fileName: PAnsiChar; frames: PInteger): Image; cdecl; external;
function  LoadImageAnimFromMemory(const fileType: PAnsiChar; const fileData: PByte; dataSize: Integer; frames: PInteger): Image; cdecl; external;
function  LoadImageFromMemory(const fileType: PAnsiChar; const fileData: PByte; dataSize: Integer): Image; cdecl; external;
function  LoadImageFromTexture(texture: Texture2D): Image; cdecl; external;
function  LoadImageFromScreen(): Image; cdecl; external;
function  IsImageValid(image: Image): Boolean; cdecl; external;
procedure UnloadImage(image: Image); cdecl; external;
function  ExportImage(image: Image; const fileName: PAnsiChar): Boolean; cdecl; external;
function  ExportImageToMemory(image: Image; const fileType: PAnsiChar; fileSize: PInteger): PByte; cdecl; external;
function  ExportImageAsCode(image: Image; const fileName: PAnsiChar): Boolean; cdecl; external;
function  GenImageColor(width: Integer; height: Integer; color: Color): Image; cdecl; external;
function  GenImageGradientLinear(width: Integer; height: Integer; direction: Integer; start: Color; end_: Color): Image; cdecl; external;
function  GenImageGradientRadial(width: Integer; height: Integer; density: Single; inner: Color; outer: Color): Image; cdecl; external;
function  GenImageGradientSquare(width: Integer; height: Integer; density: Single; inner: Color; outer: Color): Image; cdecl; external;
function  GenImageChecked(width: Integer; height: Integer; checksX: Integer; checksY: Integer; col1: Color; col2: Color): Image; cdecl; external;
function  GenImageWhiteNoise(width: Integer; height: Integer; factor: Single): Image; cdecl; external;
function  GenImagePerlinNoise(width: Integer; height: Integer; offsetX: Integer; offsetY: Integer; scale: Single): Image; cdecl; external;
function  GenImageCellular(width: Integer; height: Integer; tileSize: Integer): Image; cdecl; external;
function  GenImageText(width: Integer; height: Integer; const text: PAnsiChar): Image; cdecl; external;
function  ImageCopy(image: Image): Image; cdecl; external;
function  ImageFromImage(image: Image; rec: Rectangle): Image; cdecl; external;
function  ImageFromChannel(image: Image; selectedChannel: Integer): Image; cdecl; external;
function  ImageText(const text: PAnsiChar; fontSize: Integer; color: Color): Image; cdecl; external;
function  ImageTextEx(font: Font; const text: PAnsiChar; fontSize: Single; spacing: Single; tint: Color): Image; cdecl; external;
procedure ImageFormat(image: PImage; newFormat: Integer); cdecl; external;
procedure ImageToPOT(image: PImage; fill: Color); cdecl; external;
procedure ImageCrop(image: PImage; crop: Rectangle); cdecl; external;
procedure ImageAlphaCrop(image: PImage; threshold: Single); cdecl; external;
procedure ImageAlphaClear(image: PImage; color: Color; threshold: Single); cdecl; external;
procedure ImageAlphaMask(image: PImage; alphaMask: Image); cdecl; external;
procedure ImageAlphaPremultiply(image: PImage); cdecl; external;
procedure ImageBlurGaussian(image: PImage; blurSize: Integer); cdecl; external;
procedure ImageKernelConvolution(image: PImage; const kernel: PSingle; kernelSize: Integer); cdecl; external;
procedure ImageResize(image: PImage; newWidth: Integer; newHeight: Integer); cdecl; external;
procedure ImageResizeNN(image: PImage; newWidth: Integer; newHeight: Integer); cdecl; external;
procedure ImageResizeCanvas(image: PImage; newWidth: Integer; newHeight: Integer; offsetX: Integer; offsetY: Integer; fill: Color); cdecl; external;
procedure ImageMipmaps(image: PImage); cdecl; external;
procedure ImageDither(image: PImage; rBpp: Integer; gBpp: Integer; bBpp: Integer; aBpp: Integer); cdecl; external;
procedure ImageFlipVertical(image: PImage); cdecl; external;
procedure ImageFlipHorizontal(image: PImage); cdecl; external;
procedure ImageRotate(image: PImage; degrees: Integer); cdecl; external;
procedure ImageRotateCW(image: PImage); cdecl; external;
procedure ImageRotateCCW(image: PImage); cdecl; external;
procedure ImageColorTint(image: PImage; color: Color); cdecl; external;
procedure ImageColorInvert(image: PImage); cdecl; external;
procedure ImageColorGrayscale(image: PImage); cdecl; external;
procedure ImageColorContrast(image: PImage; contrast: Single); cdecl; external;
procedure ImageColorBrightness(image: PImage; brightness: Integer); cdecl; external;
procedure ImageColorReplace(image: PImage; color: Color; replace: Color); cdecl; external;
function  LoadImageColors(image: Image): PColor; cdecl; external;
function  LoadImagePalette(image: Image; maxPaletteSize: Integer; colorCount: PInteger): PColor; cdecl; external;
procedure UnloadImageColors(colors: PColor); cdecl; external;
procedure UnloadImagePalette(colors: PColor); cdecl; external;
function  GetImageAlphaBorder(image: Image; threshold: Single): Rectangle; cdecl; external;
function  GetImageColor(image: Image; x: Integer; y: Integer): Color; cdecl; external;
procedure ImageClearBackground(dst: PImage; color: Color); cdecl; external;
procedure ImageDrawPixel(dst: PImage; posX: Integer; posY: Integer; color: Color); cdecl; external;
procedure ImageDrawPixelV(dst: PImage; position: Vector2; color: Color); cdecl; external;
procedure ImageDrawLine(dst: PImage; startPosX: Integer; startPosY: Integer; endPosX: Integer; endPosY: Integer; color: Color); cdecl; external;
procedure ImageDrawLineV(dst: PImage; start: Vector2; end_: Vector2; color: Color); cdecl; external;
procedure ImageDrawLineEx(dst: PImage; start: Vector2; end_: Vector2; thick: Integer; color: Color); cdecl; external;
procedure ImageDrawCircle(dst: PImage; centerX: Integer; centerY: Integer; radius: Integer; color: Color); cdecl; external;
procedure ImageDrawCircleV(dst: PImage; center: Vector2; radius: Integer; color: Color); cdecl; external;
procedure ImageDrawCircleLines(dst: PImage; centerX: Integer; centerY: Integer; radius: Integer; color: Color); cdecl; external;
procedure ImageDrawCircleLinesV(dst: PImage; center: Vector2; radius: Integer; color: Color); cdecl; external;
procedure ImageDrawRectangle(dst: PImage; posX: Integer; posY: Integer; width: Integer; height: Integer; color: Color); cdecl; external;
procedure ImageDrawRectangleV(dst: PImage; position: Vector2; size: Vector2; color: Color); cdecl; external;
procedure ImageDrawRectangleRec(dst: PImage; rec: Rectangle; color: Color); cdecl; external;
procedure ImageDrawRectangleLines(dst: PImage; rec: Rectangle; thick: Integer; color: Color); cdecl; external;
procedure ImageDrawTriangle(dst: PImage; v1: Vector2; v2: Vector2; v3: Vector2; color: Color); cdecl; external;
procedure ImageDrawTriangleEx(dst: PImage; v1: Vector2; v2: Vector2; v3: Vector2; c1: Color; c2: Color; c3: Color); cdecl; external;
procedure ImageDrawTriangleLines(dst: PImage; v1: Vector2; v2: Vector2; v3: Vector2; color: Color); cdecl; external;
procedure ImageDrawTriangleFan(dst: PImage; points: PVector2; pointCount: Integer; color: Color); cdecl; external;
procedure ImageDrawTriangleStrip(dst: PImage; points: PVector2; pointCount: Integer; color: Color); cdecl; external;
procedure ImageDraw(dst: PImage; src: Image; srcRec: Rectangle; dstRec: Rectangle; tint: Color); cdecl; external;
procedure ImageDrawText(dst: PImage; const text: PAnsiChar; posX: Integer; posY: Integer; fontSize: Integer; color: Color); cdecl; external;
procedure ImageDrawTextEx(dst: PImage; font: Font; const text: PAnsiChar; position: Vector2; fontSize: Single; spacing: Single; tint: Color); cdecl; external;
function  LoadTexture(const fileName: PAnsiChar): Texture2D; cdecl; external;
function  LoadTextureFromImage(image: Image): Texture2D; cdecl; external;
function  LoadTextureCubemap(image: Image; layout: Integer): TextureCubemap; cdecl; external;
function  LoadRenderTexture(width: Integer; height: Integer): RenderTexture2D; cdecl; external;
function  IsTextureValid(texture: Texture2D): Boolean; cdecl; external;
procedure UnloadTexture(texture: Texture2D); cdecl; external;
function  IsRenderTextureValid(target: RenderTexture2D): Boolean; cdecl; external;
procedure UnloadRenderTexture(target: RenderTexture2D); cdecl; external;
procedure UpdateTexture(texture: Texture2D; const pixels: Pointer); cdecl; external;
procedure UpdateTextureRec(texture: Texture2D; rec: Rectangle; const pixels: Pointer); cdecl; external;
procedure GenTextureMipmaps(texture: PTexture2D); cdecl; external;
procedure SetTextureFilter(texture: Texture2D; filter: Integer); cdecl; external;
procedure SetTextureWrap(texture: Texture2D; wrap: Integer); cdecl; external;
procedure DrawTexture(texture: Texture2D; posX: Integer; posY: Integer; tint: Color); cdecl; external;
procedure DrawTextureV(texture: Texture2D; position: Vector2; tint: Color); cdecl; external;
procedure DrawTextureEx(texture: Texture2D; position: Vector2; rotation: Single; scale: Single; tint: Color); cdecl; external;
procedure DrawTextureRec(texture: Texture2D; source: Rectangle; position: Vector2; tint: Color); cdecl; external;
procedure DrawTexturePro(texture: Texture2D; source: Rectangle; dest: Rectangle; origin: Vector2; rotation: Single; tint: Color); cdecl; external;
procedure DrawTextureNPatch(texture: Texture2D; nPatchInfo: NPatchInfo; dest: Rectangle; origin: Vector2; rotation: Single; tint: Color); cdecl; external;
function  ColorIsEqual(col1: Color; col2: Color): Boolean; cdecl; external;
function  Fade(color: Color; alpha: Single): Color; cdecl; external;
function  ColorToInt(color: Color): Integer; cdecl; external;
function  ColorNormalize(color: Color): Vector4; cdecl; external;
function  ColorFromNormalized(normalized: Vector4): Color; cdecl; external;
function  ColorToHSV(color: Color): Vector3; cdecl; external;
function  ColorFromHSV(hue: Single; saturation: Single; value: Single): Color; cdecl; external;
function  ColorTint(color: Color; tint: Color): Color; cdecl; external;
function  ColorBrightness(color: Color; factor: Single): Color; cdecl; external;
function  ColorContrast(color: Color; contrast: Single): Color; cdecl; external;
function  ColorAlpha(color: Color; alpha: Single): Color; cdecl; external;
function  ColorAlphaBlend(dst: Color; src: Color; tint: Color): Color; cdecl; external;
function  ColorLerp(color1: Color; color2: Color; factor: Single): Color; cdecl; external;
function  GetColor(hexValue: Cardinal): Color; cdecl; external;
function  GetPixelColor(srcPtr: Pointer; format: Integer): Color; cdecl; external;
procedure SetPixelColor(dstPtr: Pointer; color: Color; format: Integer); cdecl; external;
function  GetPixelDataSize(width: Integer; height: Integer; format: Integer): Integer; cdecl; external;
function  GetFontDefault(): Font; cdecl; external;
function  LoadFont(const fileName: PAnsiChar): Font; cdecl; external;
function  LoadFontEx(const fileName: PAnsiChar; fontSize: Integer; codepoints: PInteger; codepointCount: Integer): Font; cdecl; external;
function  LoadFontFromImage(image: Image; key: Color; firstChar: Integer): Font; cdecl; external;
function  LoadFontFromMemory(const fileType: PAnsiChar; const fileData: PByte; dataSize: Integer; fontSize: Integer; codepoints: PInteger; codepointCount: Integer): Font; cdecl; external;
function  IsFontValid(font: Font): Boolean; cdecl; external;
function  LoadFontData(const fileData: PByte; dataSize: Integer; fontSize: Integer; codepoints: PInteger; codepointCount: Integer; type_: Integer): PGlyphInfo; cdecl; external;
function  GenImageFontAtlas(const glyphs: PGlyphInfo; glyphRecs: PPRectangle; glyphCount: Integer; fontSize: Integer; padding: Integer; packMethod: Integer): Image; cdecl; external;
procedure UnloadFontData(glyphs: PGlyphInfo; glyphCount: Integer); cdecl; external;
procedure UnloadFont(font: Font); cdecl; external;
function  ExportFontAsCode(font: Font; const fileName: PAnsiChar): Boolean; cdecl; external;
procedure DrawFPS(posX: Integer; posY: Integer); cdecl; external;
procedure DrawText(const text: PAnsiChar; posX: Integer; posY: Integer; fontSize: Integer; color: Color); cdecl; external;
procedure DrawTextEx(font: Font; const text: PAnsiChar; position: Vector2; fontSize: Single; spacing: Single; tint: Color); cdecl; external;
procedure DrawTextPro(font: Font; const text: PAnsiChar; position: Vector2; origin: Vector2; rotation: Single; fontSize: Single; spacing: Single; tint: Color); cdecl; external;
procedure DrawTextCodepoint(font: Font; codepoint: Integer; position: Vector2; fontSize: Single; tint: Color); cdecl; external;
procedure DrawTextCodepoints(font: Font; const codepoints: PInteger; codepointCount: Integer; position: Vector2; fontSize: Single; spacing: Single; tint: Color); cdecl; external;
procedure SetTextLineSpacing(spacing: Integer); cdecl; external;
function  MeasureText(const text: PAnsiChar; fontSize: Integer): Integer; cdecl; external;
function  MeasureTextEx(font: Font; const text: PAnsiChar; fontSize: Single; spacing: Single): Vector2; cdecl; external;
function  GetGlyphIndex(font: Font; codepoint: Integer): Integer; cdecl; external;
function  GetGlyphInfo(font: Font; codepoint: Integer): GlyphInfo; cdecl; external;
function  GetGlyphAtlasRec(font: Font; codepoint: Integer): Rectangle; cdecl; external;
function  LoadUTF8(const codepoints: PInteger; length: Integer): PAnsiChar; cdecl; external;
procedure UnloadUTF8(text: PAnsiChar); cdecl; external;
function  LoadCodepoints(const text: PAnsiChar; count: PInteger): PInteger; cdecl; external;
procedure UnloadCodepoints(codepoints: PInteger); cdecl; external;
function  GetCodepointCount(const text: PAnsiChar): Integer; cdecl; external;
function  GetCodepoint(const text: PAnsiChar; codepointSize: PInteger): Integer; cdecl; external;
function  GetCodepointNext(const text: PAnsiChar; codepointSize: PInteger): Integer; cdecl; external;
function  GetCodepointPrevious(const text: PAnsiChar; codepointSize: PInteger): Integer; cdecl; external;
function  CodepointToUTF8(codepoint: Integer; utf8Size: PInteger): PAnsiChar; cdecl; external;
function  TextCopy(dst: PAnsiChar; const src: PAnsiChar): Integer; cdecl; external;
function  TextIsEqual(const text1: PAnsiChar; const text2: PAnsiChar): Boolean; cdecl; external;
function  TextLength(const text: PAnsiChar): Cardinal; cdecl; external;
function  TextFormat(const text: PAnsiChar): PAnsiChar varargs; cdecl; external;
function  TextSubtext(const text: PAnsiChar; position: Integer; length: Integer): PAnsiChar; cdecl; external;
function  TextReplace(const text: PAnsiChar; const replace: PAnsiChar; const by: PAnsiChar): PAnsiChar; cdecl; external;
function  TextInsert(const text: PAnsiChar; const insert: PAnsiChar; position: Integer): PAnsiChar; cdecl; external;
function  TextJoin(textList: PPAnsiChar; count: Integer; const delimiter: PAnsiChar): PAnsiChar; cdecl; external;
function  TextSplit(const text: PAnsiChar; delimiter: AnsiChar; count: PInteger): PPAnsiChar; cdecl; external;
procedure TextAppend(text: PAnsiChar; const append: PAnsiChar; position: PInteger); cdecl; external;
function  TextFindIndex(const text: PAnsiChar; const find: PAnsiChar): Integer; cdecl; external;
function  TextToUpper(const text: PAnsiChar): PAnsiChar; cdecl; external;
function  TextToLower(const text: PAnsiChar): PAnsiChar; cdecl; external;
function  TextToPascal(const text: PAnsiChar): PAnsiChar; cdecl; external;
function  TextToSnake(const text: PAnsiChar): PAnsiChar; cdecl; external;
function  TextToCamel(const text: PAnsiChar): PAnsiChar; cdecl; external;
function  TextToInteger(const text: PAnsiChar): Integer; cdecl; external;
function  TextToFloat(const text: PAnsiChar): Single; cdecl; external;
procedure DrawLine3D(startPos: Vector3; endPos: Vector3; color: Color); cdecl; external;
procedure DrawPoint3D(position: Vector3; color: Color); cdecl; external;
procedure DrawCircle3D(center: Vector3; radius: Single; rotationAxis: Vector3; rotationAngle: Single; color: Color); cdecl; external;
procedure DrawTriangle3D(v1: Vector3; v2: Vector3; v3: Vector3; color: Color); cdecl; external;
procedure DrawTriangleStrip3D(const points: PVector3; pointCount: Integer; color: Color); cdecl; external;
procedure DrawCube(position: Vector3; width: Single; height: Single; length: Single; color: Color); cdecl; external;
procedure DrawCubeV(position: Vector3; size: Vector3; color: Color); cdecl; external;
procedure DrawCubeWires(position: Vector3; width: Single; height: Single; length: Single; color: Color); cdecl; external;
procedure DrawCubeWiresV(position: Vector3; size: Vector3; color: Color); cdecl; external;
procedure DrawSphere(centerPos: Vector3; radius: Single; color: Color); cdecl; external;
procedure DrawSphereEx(centerPos: Vector3; radius: Single; rings: Integer; slices: Integer; color: Color); cdecl; external;
procedure DrawSphereWires(centerPos: Vector3; radius: Single; rings: Integer; slices: Integer; color: Color); cdecl; external;
procedure DrawCylinder(position: Vector3; radiusTop: Single; radiusBottom: Single; height: Single; slices: Integer; color: Color); cdecl; external;
procedure DrawCylinderEx(startPos: Vector3; endPos: Vector3; startRadius: Single; endRadius: Single; sides: Integer; color: Color); cdecl; external;
procedure DrawCylinderWires(position: Vector3; radiusTop: Single; radiusBottom: Single; height: Single; slices: Integer; color: Color); cdecl; external;
procedure DrawCylinderWiresEx(startPos: Vector3; endPos: Vector3; startRadius: Single; endRadius: Single; sides: Integer; color: Color); cdecl; external;
procedure DrawCapsule(startPos: Vector3; endPos: Vector3; radius: Single; slices: Integer; rings: Integer; color: Color); cdecl; external;
procedure DrawCapsuleWires(startPos: Vector3; endPos: Vector3; radius: Single; slices: Integer; rings: Integer; color: Color); cdecl; external;
procedure DrawPlane(centerPos: Vector3; size: Vector2; color: Color); cdecl; external;
procedure DrawRay(ray: Ray; color: Color); cdecl; external;
procedure DrawGrid(slices: Integer; spacing: Single); cdecl; external;
function  LoadModel(const fileName: PAnsiChar): Model; cdecl; external;
function  LoadModelFromMesh(mesh: Mesh): Model; cdecl; external;
function  IsModelValid(model: Model): Boolean; cdecl; external;
procedure UnloadModel(model: Model); cdecl; external;
function  GetModelBoundingBox(model: Model): BoundingBox; cdecl; external;
procedure DrawModel(model: Model; position: Vector3; scale: Single; tint: Color); cdecl; external;
procedure DrawModelEx(model: Model; position: Vector3; rotationAxis: Vector3; rotationAngle: Single; scale: Vector3; tint: Color); cdecl; external;
procedure DrawModelWires(model: Model; position: Vector3; scale: Single; tint: Color); cdecl; external;
procedure DrawModelWiresEx(model: Model; position: Vector3; rotationAxis: Vector3; rotationAngle: Single; scale: Vector3; tint: Color); cdecl; external;
procedure DrawModelPoints(model: Model; position: Vector3; scale: Single; tint: Color); cdecl; external;
procedure DrawModelPointsEx(model: Model; position: Vector3; rotationAxis: Vector3; rotationAngle: Single; scale: Vector3; tint: Color); cdecl; external;
procedure DrawBoundingBox(box: BoundingBox; color: Color); cdecl; external;
procedure DrawBillboard(camera: Camera; texture: Texture2D; position: Vector3; scale: Single; tint: Color); cdecl; external;
procedure DrawBillboardRec(camera: Camera; texture: Texture2D; source: Rectangle; position: Vector3; size: Vector2; tint: Color); cdecl; external;
procedure DrawBillboardPro(camera: Camera; texture: Texture2D; source: Rectangle; position: Vector3; up: Vector3; size: Vector2; origin: Vector2; rotation: Single; tint: Color); cdecl; external;
procedure UploadMesh(mesh: PMesh; dynamic_: Boolean); cdecl; external;
procedure UpdateMeshBuffer(mesh: Mesh; index: Integer; const data: Pointer; dataSize: Integer; offset: Integer); cdecl; external;
procedure UnloadMesh(mesh: Mesh); cdecl; external;
procedure DrawMesh(mesh: Mesh; material: Material; transform: Matrix); cdecl; external;
procedure DrawMeshInstanced(mesh: Mesh; material: Material; const transforms: PMatrix; instances: Integer); cdecl; external;
function  GetMeshBoundingBox(mesh: Mesh): BoundingBox; cdecl; external;
procedure GenMeshTangents(mesh: PMesh); cdecl; external;
function  ExportMesh(mesh: Mesh; const fileName: PAnsiChar): Boolean; cdecl; external;
function  ExportMeshAsCode(mesh: Mesh; const fileName: PAnsiChar): Boolean; cdecl; external;
function  GenMeshPoly(sides: Integer; radius: Single): Mesh; cdecl; external;
function  GenMeshPlane(width: Single; length: Single; resX: Integer; resZ: Integer): Mesh; cdecl; external;
function  GenMeshCube(width: Single; height: Single; length: Single): Mesh; cdecl; external;
function  GenMeshSphere(radius: Single; rings: Integer; slices: Integer): Mesh; cdecl; external;
function  GenMeshHemiSphere(radius: Single; rings: Integer; slices: Integer): Mesh; cdecl; external;
function  GenMeshCylinder(radius: Single; height: Single; slices: Integer): Mesh; cdecl; external;
function  GenMeshCone(radius: Single; height: Single; slices: Integer): Mesh; cdecl; external;
function  GenMeshTorus(radius: Single; size: Single; radSeg: Integer; sides: Integer): Mesh; cdecl; external;
function  GenMeshKnot(radius: Single; size: Single; radSeg: Integer; sides: Integer): Mesh; cdecl; external;
function  GenMeshHeightmap(heightmap: Image; size: Vector3): Mesh; cdecl; external;
function  GenMeshCubicmap(cubicmap: Image; cubeSize: Vector3): Mesh; cdecl; external;
function  LoadMaterials(const fileName: PAnsiChar; materialCount: PInteger): PMaterial; cdecl; external;
function  LoadMaterialDefault(): Material; cdecl; external;
function  IsMaterialValid(material: Material): Boolean; cdecl; external;
procedure UnloadMaterial(material: Material); cdecl; external;
procedure SetMaterialTexture(material: PMaterial; mapType: Integer; texture: Texture2D); cdecl; external;
procedure SetModelMeshMaterial(model: PModel; meshId: Integer; materialId: Integer); cdecl; external;
function  LoadModelAnimations(const fileName: PAnsiChar; animCount: PInteger): PModelAnimation; cdecl; external;
procedure UpdateModelAnimation(model: Model; anim: ModelAnimation; frame: Integer); cdecl; external;
procedure UpdateModelAnimationBones(model: Model; anim: ModelAnimation; frame: Integer); cdecl; external;
procedure UnloadModelAnimation(anim: ModelAnimation); cdecl; external;
procedure UnloadModelAnimations(animations: PModelAnimation; animCount: Integer); cdecl; external;
function  IsModelAnimationValid(model: Model; anim: ModelAnimation): Boolean; cdecl; external;
function  CheckCollisionSpheres(center1: Vector3; radius1: Single; center2: Vector3; radius2: Single): Boolean; cdecl; external;
function  CheckCollisionBoxes(box1: BoundingBox; box2: BoundingBox): Boolean; cdecl; external;
function  CheckCollisionBoxSphere(box: BoundingBox; center: Vector3; radius: Single): Boolean; cdecl; external;
function  GetRayCollisionSphere(ray: Ray; center: Vector3; radius: Single): RayCollision; cdecl; external;
function  GetRayCollisionBox(ray: Ray; box: BoundingBox): RayCollision; cdecl; external;
function  GetRayCollisionMesh(ray: Ray; mesh: Mesh; transform: Matrix): RayCollision; cdecl; external;
function  GetRayCollisionTriangle(ray: Ray; p1: Vector3; p2: Vector3; p3: Vector3): RayCollision; cdecl; external;
function  GetRayCollisionQuad(ray: Ray; p1: Vector3; p2: Vector3; p3: Vector3; p4: Vector3): RayCollision; cdecl; external;
procedure InitAudioDevice(); cdecl; external;
procedure CloseAudioDevice(); cdecl; external;
function  IsAudioDeviceReady(): Boolean; cdecl; external;
procedure SetMasterVolume(volume: Single); cdecl; external;
function  GetMasterVolume(): Single; cdecl; external;
function  LoadWave(const fileName: PAnsiChar): Wave; cdecl; external;
function  LoadWaveFromMemory(const fileType: PAnsiChar; const fileData: PByte; dataSize: Integer): Wave; cdecl; external;
function  IsWaveValid(wave: Wave): Boolean; cdecl; external;
function  LoadSound(const fileName: PAnsiChar): Sound; cdecl; external;
function  LoadSoundFromWave(wave: Wave): Sound; cdecl; external;
function  LoadSoundAlias(source: Sound): Sound; cdecl; external;
function  IsSoundValid(sound: Sound): Boolean; cdecl; external;
procedure UpdateSound(sound: Sound; const data: Pointer; sampleCount: Integer); cdecl; external;
procedure UnloadWave(wave: Wave); cdecl; external;
procedure UnloadSound(sound: Sound); cdecl; external;
procedure UnloadSoundAlias(alias: Sound); cdecl; external;
function  ExportWave(wave: Wave; const fileName: PAnsiChar): Boolean; cdecl; external;
function  ExportWaveAsCode(wave: Wave; const fileName: PAnsiChar): Boolean; cdecl; external;
procedure PlaySound(sound: Sound); cdecl; external;
procedure StopSound(sound: Sound); cdecl; external;
procedure PauseSound(sound: Sound); cdecl; external;
procedure ResumeSound(sound: Sound); cdecl; external;
function  IsSoundPlaying(sound: Sound): Boolean; cdecl; external;
procedure SetSoundVolume(sound: Sound; volume: Single); cdecl; external;
procedure SetSoundPitch(sound: Sound; pitch: Single); cdecl; external;
procedure SetSoundPan(sound: Sound; pan: Single); cdecl; external;
function  WaveCopy(wave: Wave): Wave; cdecl; external;
procedure WaveCrop(wave: PWave; initFrame: Integer; finalFrame: Integer); cdecl; external;
procedure WaveFormat(wave: PWave; sampleRate: Integer; sampleSize: Integer; channels: Integer); cdecl; external;
function  LoadWaveSamples(wave: Wave): PSingle; cdecl; external;
procedure UnloadWaveSamples(samples: PSingle); cdecl; external;
function  LoadMusicStream(const fileName: PAnsiChar): Music; cdecl; external;
function  LoadMusicStreamFromMemory(const fileType: PAnsiChar; const data: PByte; dataSize: Integer): Music; cdecl; external;
function  IsMusicValid(music: Music): Boolean; cdecl; external;
procedure UnloadMusicStream(music: Music); cdecl; external;
procedure PlayMusicStream(music: Music); cdecl; external;
function  IsMusicStreamPlaying(music: Music): Boolean; cdecl; external;
procedure UpdateMusicStream(music: Music); cdecl; external;
procedure StopMusicStream(music: Music); cdecl; external;
procedure PauseMusicStream(music: Music); cdecl; external;
procedure ResumeMusicStream(music: Music); cdecl; external;
procedure SeekMusicStream(music: Music; position: Single); cdecl; external;
procedure SetMusicVolume(music: Music; volume: Single); cdecl; external;
procedure SetMusicPitch(music: Music; pitch: Single); cdecl; external;
procedure SetMusicPan(music: Music; pan: Single); cdecl; external;
function  GetMusicTimeLength(music: Music): Single; cdecl; external;
function  GetMusicTimePlayed(music: Music): Single; cdecl; external;
function  LoadAudioStream(sampleRate: Cardinal; sampleSize: Cardinal; channels: Cardinal): AudioStream; cdecl; external;
function  IsAudioStreamValid(stream: AudioStream): Boolean; cdecl; external;
procedure UnloadAudioStream(stream: AudioStream); cdecl; external;
procedure UpdateAudioStream(stream: AudioStream; const data: Pointer; frameCount: Integer); cdecl; external;
function  IsAudioStreamProcessed(stream: AudioStream): Boolean; cdecl; external;
procedure PlayAudioStream(stream: AudioStream); cdecl; external;
procedure PauseAudioStream(stream: AudioStream); cdecl; external;
procedure ResumeAudioStream(stream: AudioStream); cdecl; external;
function  IsAudioStreamPlaying(stream: AudioStream): Boolean; cdecl; external;
procedure StopAudioStream(stream: AudioStream); cdecl; external;
procedure SetAudioStreamVolume(stream: AudioStream; volume: Single); cdecl; external;
procedure SetAudioStreamPitch(stream: AudioStream; pitch: Single); cdecl; external;
procedure SetAudioStreamPan(stream: AudioStream; pan: Single); cdecl; external;
procedure SetAudioStreamBufferSizeDefault(size: Integer); cdecl; external;
procedure SetAudioStreamCallback(stream: AudioStream; callback: AudioCallback); cdecl; external;
procedure AttachAudioStreamProcessor(stream: AudioStream; processor: AudioCallback); cdecl; external;
procedure DetachAudioStreamProcessor(stream: AudioStream; processor: AudioCallback); cdecl; external;
procedure AttachAudioMixedProcessor(processor: AudioCallback); cdecl; external;
procedure DetachAudioMixedProcessor(processor: AudioCallback); cdecl; external;

implementation

end.
